########################## hair hormone ~ ges_time ##########################
# Note that hair hormone does not need to remove 10001_scan1
dat_total <- read.csv("/Users/yanbinniu/Projects/NCAP/scripts/analysis_t1/data_all.csv")
dat_total_subset_hor <- dat_total[!(dat_total$sub_id=="10014" | dat_total$sub_id=="10016"
| dat_total$sub_id=="10018"),]
dat_total_subset_hor$sub_id <- as.factor(dat_total_subset_hor$sub_id)
dat_total_subset_hor$ges_time_z <- scale(dat_total_subset_hor$ges_time, center = T, scale = T)
dat_total_subset_hor$age_z <- scale(dat_total_subset_hor$age, center = T, scale = T)
dat_total_subset_hor$cortisol_win_centered_z <- scale(dat_total_subset_hor$cortisol_win_centered, center = T, scale = T)
dat_total_subset_hor$cortisone_win_centered_z <- scale(dat_total_subset_hor$cortisone_win_centered, center = T, scale = T)
dat_total_subset_hor$progesterone_win_centered_z <- scale(dat_total_subset_hor$progesterone_win_centered, center = T, scale = T)
dat_total_subset_hor$distance <- dat_total_subset_hor$segment_sample_use - 1
dat_total_subset_hor$distance_z <- scale(dat_total_subset_hor$distance, center = T, scale = T)
# y variables of interest
hormone_interest <- c('cortisol_win_centered', 'cortisone_win_centered', 'progesterone_win_centered')
# covariate: age
# note that controlling age will not converge
df_result_ges <- data.frame(ROI1=character(),
p=double(),
b=double(),
beta=double(),
beta_lower=double(),
beta_upper=double(), stringsAsFactors=FALSE)
for (i in hormone_interest) {
f <- formula(paste(i, " ~ ges_time + distance + age"))
fit_tmp <- lme(f, random = ~ 1 | sub_id,
data=dat_total_subset_hor, na.action=na.omit)
print(summary(fit_tmp))
sum_tmp <- summary(fit_tmp)
tmp_p <- sum_tmp$tTable["ges_time", "p-value"]
b_tmp <- unname(sum_tmp$coefficients$fixed["ges_time"])
# standardized beta and intervals
dat_total_subset_hor$y_z_tmpi <- scale(dat_total_subset_hor[i], center = TRUE, scale = TRUE)
fit_z_tmp <- lme(y_z_tmpi ~ ges_time_z + distance_z + age_z,
random = ~ 1 | sub_id,
data=dat_total_subset_hor, na.action=na.omit)
print(summary(fit_z_tmp))
sum_tmp_z <- summary(fit_z_tmp)
beta_lower_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "lower"]
beta_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "est."]
beta_upper_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "upper"]
# append
df_result_ges[nrow(df_result_ges) + 1,] = c(i, unname(tmp_p), b_tmp,
unname(beta_tmp), unname(beta_lower_tmp), unname(beta_upper_tmp))
}
write.csv(df_result_ges, "/Users/yanbinniu/Projects/NCAP/scripts/analysis_t1/results/df_result_ges_hormone_hair_stdCov.csv",
row.names=F)
library(readxl)
library(nlme)
library(lme4)
library(lmerTest)
library(ggplot2)
library(sjmisc)
library(sjstats)
library(parameters)
library(r2glmm)
library(rstatix)
########################## hair hormone ~ ges_time ##########################
# Note that hair hormone does not need to remove 10001_scan1
dat_total <- read.csv("/Users/yanbinniu/Projects/NCAP/scripts/analysis_t1/data_all.csv")
dat_total_subset_hor <- dat_total[!(dat_total$sub_id=="10014" | dat_total$sub_id=="10016"
| dat_total$sub_id=="10018"),]
dat_total_subset_hor$sub_id <- as.factor(dat_total_subset_hor$sub_id)
dat_total_subset_hor$ges_time_z <- scale(dat_total_subset_hor$ges_time, center = T, scale = T)
dat_total_subset_hor$age_z <- scale(dat_total_subset_hor$age, center = T, scale = T)
dat_total_subset_hor$cortisol_win_centered_z <- scale(dat_total_subset_hor$cortisol_win_centered, center = T, scale = T)
dat_total_subset_hor$cortisone_win_centered_z <- scale(dat_total_subset_hor$cortisone_win_centered, center = T, scale = T)
dat_total_subset_hor$progesterone_win_centered_z <- scale(dat_total_subset_hor$progesterone_win_centered, center = T, scale = T)
dat_total_subset_hor$distance <- dat_total_subset_hor$segment_sample_use - 1
dat_total_subset_hor$distance_z <- scale(dat_total_subset_hor$distance, center = T, scale = T)
# y variables of interest
hormone_interest <- c('cortisol_win_centered', 'cortisone_win_centered', 'progesterone_win_centered')
# covariate: age
# note that controlling age will not converge
df_result_ges <- data.frame(ROI1=character(),
p=double(),
b=double(),
beta=double(),
beta_lower=double(),
beta_upper=double(), stringsAsFactors=FALSE)
for (i in hormone_interest) {
f <- formula(paste(i, " ~ ges_time + distance + age"))
fit_tmp <- lme(f, random = ~ 1 | sub_id,
data=dat_total_subset_hor, na.action=na.omit)
print(summary(fit_tmp))
sum_tmp <- summary(fit_tmp)
tmp_p <- sum_tmp$tTable["ges_time", "p-value"]
b_tmp <- unname(sum_tmp$coefficients$fixed["ges_time"])
# standardized beta and intervals
dat_total_subset_hor$y_z_tmpi <- scale(dat_total_subset_hor[i], center = TRUE, scale = TRUE)
fit_z_tmp <- lme(y_z_tmpi ~ ges_time_z + distance_z + age_z,
random = ~ 1 | sub_id,
data=dat_total_subset_hor, na.action=na.omit)
print(summary(fit_z_tmp))
sum_tmp_z <- summary(fit_z_tmp)
beta_lower_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "lower"]
beta_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "est."]
beta_upper_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "upper"]
# append
df_result_ges[nrow(df_result_ges) + 1,] = c(i, unname(tmp_p), b_tmp,
unname(beta_tmp), unname(beta_lower_tmp), unname(beta_upper_tmp))
}
write.csv(df_result_ges, "/Users/yanbinniu/Projects/NCAP/scripts/analysis_t1/results/df_result_ges_hormone_hair_stdCov.csv",
row.names=F)
library(psych)
data_t1 <- read.csv("/Users/yanbinniu/Projects/NCAP/scripts/analysis_immune/data/t1_immune.csv")
describe(data_t1[c("IL_6", "IL_10", "TNF_a", "CRP")])
####### immune change #######
data_t1 <- read.csv("/Users/yanbinniu/Projects/NCAP/scripts/analysis_immune/data/t1_immune.csv")
####### immune change #######
data_t1 <- read.csv("/Users/yanbinniu/Projects/NCAP/scripts/analysis_immune/data/t1_immune.csv")
# log transform
data_t1$CRP_log <- log(data_t1$CRP)
data_t1$IL_10_log <- log(data_t1$IL_10)
data_t1$IL_6_log <- log(data_t1$IL_6)
data_t1$TNF_a_log <- log(data_t1$TNF_a)
# subset
data_t1$sub_id <- as.factor(data_t1$sub_id)
data_t1_sub <- subset(data_t1, ges_time>0)
### NOTE that, removing 10012_scan2 is just by eye-balling the scatter plotting of CRP,
### it does not matter for others, coz  "IL_10_log", "IL_6_log", "TNF_a_log" does not have 10012_scan2 data.
data_t1_sub <- data_t1_sub[!((data_t1_sub$scan_id=="10012_scan2")),]
dat_total_subset <- data_t1_sub
# std
dat_total_subset$ges_time_z <- scale(dat_total_subset$ges_time, center = TRUE, scale = TRUE)
dat_total_subset$age_z <- scale(dat_total_subset$age, center = TRUE, scale = TRUE)
y_interest <- c("CRP_log", "IL_10_log", "IL_6_log", "TNF_a_log")
df_result_ges <- data.frame(ROI1=character(),
p=double(),
b=double(),
beta=double(),
beta_lower=double(),
beta_upper=double(), stringsAsFactors=FALSE)
for (i in y_interest) {
f <- formula(paste(i, "~ ges_time + age"))
fit_tmp <- lme(f, random = ~ 1 | sub_id,
data=dat_total_subset,
na.action=na.omit)
print(summary(fit_tmp))
sum_tmp <- summary(fit_tmp)
tmp_p <- sum_tmp$tTable["ges_time", "p-value"]
b_tmp <- unname(sum_tmp$coefficients$fixed['ges_time'])
# standardized beta and intervals
dat_total_subset$y_z_tmpi <- scale(dat_total_subset[i], center = TRUE, scale = TRUE)
fit_z_tmp <- lme(y_z_tmpi ~ ges_time_z + age_z,
random = ~ 1 | sub_id,
data=dat_total_subset,
na.action=na.omit)
sum_tmp_z <- summary(fit_z_tmp)
beta_lower_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "lower"]
beta_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "est."]
beta_upper_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "upper"]
# append
df_result_ges[nrow(df_result_ges) + 1,] = c(i, unname(tmp_p), b_tmp,
unname(beta_tmp), unname(beta_lower_tmp), unname(beta_upper_tmp))
# plotting
# new predict
new.dat <- data.frame(ges_time=10:40,
age = mean(dat_total_subset$age, na.rm = TRUE))
new.dat <- construct_ci(fit_tmp, new.dat)
lm_fit <- lm(new.dat$pred ~ c(10:40))
intercept <- coef(lm_fit)[1]
slope <- coef(lm_fit)[2]
# plotting CRP_log, IL_10_log, IL_6_log, TNF_a_log
my_plot <- ggplot(dat_total_subset, aes_string(x = "ges_time", y = i, color="sub_id")) +
geom_line(size = 1.2) +
geom_point(size = 3) +
xlab("     ") + ylab("    ") +
scale_x_continuous(limits = c(10,40), n.breaks = 9) +
geom_ribbon(data= new.dat,
aes(x=ges_time, y = pred, ymin = ci_l, ymax = ci_h),
alpha = 0.1, colour = NA) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.position="none", axis.text=element_text(size=20, color="black"),
axis.title = element_text(size = 20), axis.title.x = element_text(margin = margin(t=20)),
axis.title.y = element_text(margin = margin(r=30)))
fig_file = paste0("/Users/yanbinniu/Projects/NCAP/scripts/analysis_immune/figs/", i, ".png")
ggsave(fig_file, plot = my_plot, width = 10.5, height = 10, units = "in")
}
# construct function for lme
# pred_int -- prediction intervals
# the method described by href{https://bbolker.github.io/mixedmodels-misc/glmmFAQ.html#predictions-andor-confidence-or-prediction-intervals-on-predictions}{Ben Bolker}
construct_ci <- function(model, newdat, pred_int = FALSE, conf_level = 0.95) {
if(class(model) != "lme") {
stop("works for lme-models only")
}
z <- round(qnorm((1-conf_level)/2, lower.tail = FALSE), 3)
newdat$pred <- predict(model, newdat, level = 0)
Designmat <- model.matrix(formula(model)[-2], newdat)
predvar <- diag(Designmat %*% vcov(model) %*% t(Designmat))
newdat$se <- sqrt(predvar)
newdat$ci_l <- newdat$pred - z*newdat$se
newdat$ci_h <- newdat$pred + z*newdat$se
if(pred_int == TRUE) {
newdat$se2 <- sqrt(predvar+model$sigma^2)
newdat$predint_l <- newdat$pred - z*newdat$se2
newdat$predint_h <- newdat$pred + z*newdat$se2
}
newdat
}
for (i in y_interest) {
f <- formula(paste(i, "~ ges_time + age"))
fit_tmp <- lme(f, random = ~ 1 | sub_id,
data=dat_total_subset,
na.action=na.omit)
print(summary(fit_tmp))
sum_tmp <- summary(fit_tmp)
tmp_p <- sum_tmp$tTable["ges_time", "p-value"]
b_tmp <- unname(sum_tmp$coefficients$fixed['ges_time'])
# standardized beta and intervals
dat_total_subset$y_z_tmpi <- scale(dat_total_subset[i], center = TRUE, scale = TRUE)
fit_z_tmp <- lme(y_z_tmpi ~ ges_time_z + age_z,
random = ~ 1 | sub_id,
data=dat_total_subset,
na.action=na.omit)
sum_tmp_z <- summary(fit_z_tmp)
beta_lower_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "lower"]
beta_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "est."]
beta_upper_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "upper"]
# append
df_result_ges[nrow(df_result_ges) + 1,] = c(i, unname(tmp_p), b_tmp,
unname(beta_tmp), unname(beta_lower_tmp), unname(beta_upper_tmp))
# plotting
# new predict
new.dat <- data.frame(ges_time=10:40,
age = mean(dat_total_subset$age, na.rm = TRUE))
new.dat <- construct_ci(fit_tmp, new.dat)
lm_fit <- lm(new.dat$pred ~ c(10:40))
intercept <- coef(lm_fit)[1]
slope <- coef(lm_fit)[2]
# plotting CRP_log, IL_10_log, IL_6_log, TNF_a_log
my_plot <- ggplot(dat_total_subset, aes_string(x = "ges_time", y = i, color="sub_id")) +
geom_line(size = 1.2) +
geom_point(size = 3) +
xlab("     ") + ylab("    ") +
scale_x_continuous(limits = c(10,40), n.breaks = 9) +
geom_ribbon(data= new.dat,
aes(x=ges_time, y = pred, ymin = ci_l, ymax = ci_h),
alpha = 0.1, colour = NA) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.position="none", axis.text=element_text(size=20, color="black"),
axis.title = element_text(size = 20), axis.title.x = element_text(margin = margin(t=20)),
axis.title.y = element_text(margin = margin(r=30)))
fig_file = paste0("/Users/yanbinniu/Projects/NCAP/scripts/analysis_immune/figs/", i, ".png")
ggsave(fig_file, plot = my_plot, width = 10.5, height = 10, units = "in")
}
write.csv(df_result_ges, "/Users/yanbinniu/Projects/NCAP/scripts/analysis_immune/results/immune_change.csv",
row.names = FALSE)
df_result_ges <- data.frame(ROI1=character(),
p=double(),
b=double(),
beta=double(),
beta_lower=double(),
beta_upper=double(), stringsAsFactors=FALSE)
for (i in y_interest) {
f <- formula(paste(i, "~ ges_time + age"))
fit_tmp <- lme(f, random = ~ 1 | sub_id,
data=dat_total_subset,
na.action=na.omit)
print(summary(fit_tmp))
sum_tmp <- summary(fit_tmp)
tmp_p <- sum_tmp$tTable["ges_time", "p-value"]
b_tmp <- unname(sum_tmp$coefficients$fixed['ges_time'])
# standardized beta and intervals
dat_total_subset$y_z_tmpi <- scale(dat_total_subset[i], center = TRUE, scale = TRUE)
fit_z_tmp <- lme(y_z_tmpi ~ ges_time_z + age_z,
random = ~ 1 | sub_id,
data=dat_total_subset,
na.action=na.omit)
sum_tmp_z <- summary(fit_z_tmp)
beta_lower_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "lower"]
beta_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "est."]
beta_upper_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "upper"]
# append
df_result_ges[nrow(df_result_ges) + 1,] = c(i, unname(tmp_p), b_tmp,
unname(beta_tmp), unname(beta_lower_tmp), unname(beta_upper_tmp))
# plotting
# new predict
new.dat <- data.frame(ges_time=10:40,
age = mean(dat_total_subset$age, na.rm = TRUE))
new.dat <- construct_ci(fit_tmp, new.dat)
lm_fit <- lm(new.dat$pred ~ c(10:40))
intercept <- coef(lm_fit)[1]
slope <- coef(lm_fit)[2]
# plotting CRP_log, IL_10_log, IL_6_log, TNF_a_log
my_plot <- ggplot(dat_total_subset, aes_string(x = "ges_time", y = i, color="sub_id")) +
geom_line(size = 1.2) +
geom_point(size = 3) +
xlab("     ") + ylab("    ") +
scale_x_continuous(limits = c(10,40), n.breaks = 9) +
geom_ribbon(data= new.dat,
aes(x=ges_time, y = pred, ymin = ci_l, ymax = ci_h),
alpha = 0.1, colour = NA) +
theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank(), panel.background = element_blank(),
axis.line = element_line(colour = "black"), legend.position="none", axis.text=element_text(size=20, color="black"),
axis.title = element_text(size = 20), axis.title.x = element_text(margin = margin(t=20)),
axis.title.y = element_text(margin = margin(r=30)))
fig_file = paste0("/Users/yanbinniu/Projects/NCAP/scripts/analysis_immune/figs/", i, ".png")
ggsave(fig_file, plot = my_plot, width = 10.5, height = 10, units = "in")
}
write.csv(df_result_ges, "/Users/yanbinniu/Projects/NCAP/scripts/analysis_immune/results/immune_change.csv",
row.names = FALSE)
library(readxl)
library(nlme)
library(lme4)
library(ggplot2)
library(sjmisc)
library(sjstats)
library(parameters)
library(r2glmm)
library(tibble)
library(dplyr)
library(tidyr)
library(rstatix)
########################## 1) csf change ##########################
dat_total <- read.csv("/Users/yanbinniu/Projects/NCAP/scripts/github/NCAP/structure_changes/data/csfmap.csv")
########################## 1) csf change ##########################
dat_total <- read.csv("/Users/yanbinniu/Projects/NCAP/scripts/github/NCAP/structure_changes/data/csfmap.csv")
# remove 10004_scan1 which did not have qalas data
dat_total_subset <- dat_total[!(dat_total$fsid=='10004_scan1'),]
dat_total_subset$sub_id <- as.factor(dat_total_subset$sub_id)
# control for TICV
dat_total_subset$ges_time_z <- scale(dat_total_subset$ges_time , center = TRUE, scale = TRUE)
dat_total_subset$age_z <- scale(dat_total_subset$age , center = TRUE, scale = TRUE)
dat_total_subset$EstimatedTICV_z <- scale(dat_total_subset$EstimatedTICV , center = TRUE, scale = TRUE)
# control for TICV and age
df_result_ges <- data.frame(ROI=character(),
p=double(),
b=double(),
interc=double(),
beta=double(),
beta_lower=double(),
beta_upper=double(),
r2=double(),
r2_lower=double(),
r2_upper=double(),stringsAsFactors=FALSE)
names(dat_total_subset)
library(nlme)
library(sjPlot)
library(sjmisc)
library(ggplot2)
library(MuMIn)
library(r2glmm)
library(sjstats)
library(rstatix)
library(reghelper)
library(tidyr)
# switch to the desired workng directory
setwd('/Users/yanbinniu/Projects/NCAP/scripts/github/NCAP/data')
file_list <- c("matlab_icvf_all.csv", "matlab_od_all.csv")
# file_list <- c("fa_all.csv", "md_all.csv", "ad_all.csv", "rd_all.csv")
################## matlab noddi and gestational age ##################
# df_final as the final merged dataframe for python heatmap plotting
ROI_interest <- c("AF", "ATR", "CG", "CST", "FPT", "ICP", "IFO", "ILF", "OR", "POPT", "SCP", "SLF_I",
"SLF_II", "SLF_III", "STR", "UF", "T_PREM", "T_PAR", "T_OCC", "ST_FO", "ST_PREM", "CC_RG",
"CC_body", "CC_IS")
df_final <- data.frame(ROI=ROI_interest, stringsAsFactors=FALSE)
for (metric in file_list) {
print(metric)
importDat <- read.csv(metric, header = TRUE)
importDat$sub <- as.factor(importDat$sub)
importDat_sub <- subset(importDat, ges_time>0)
dat_total_subset <- importDat_sub
# convert to the long format
dat_total_subset$scan <- unlist(lapply(dat_total_subset$fsid, function(x) strsplit(x, '_')[[1]][2]))
dat_total_subset$ges_time_z <- scale(dat_total_subset$ges_time, center = TRUE, scale = TRUE)
dat_total_subset$age_z <- scale(dat_total_subset$age, center = TRUE, scale = TRUE)
dat_total_subset$motion_rel_z <- scale(dat_total_subset$motion_rel, center = TRUE, scale = TRUE)
dat_total_subset$progesterone_z <- scale(dat_total_subset$progesterone, center = TRUE, scale = TRUE)
dat_total_subset$estradiol_z <- scale(dat_total_subset$estradiol, center = TRUE, scale = TRUE)
dat_total_subset$testosterone_z <- scale(dat_total_subset$testosterone, center = TRUE, scale = TRUE)
dat_total_subset$cortisol_z <- scale(dat_total_subset$cortisol, center = TRUE, scale = TRUE)
list_subregions <- list()
list_subregions_long <- list()
for (trac in names(dat_total_subset)) {
if (grepl('_left', trac)) {
print(trac)
# find the left tract index
idx_left <- which(trac == names(dat_total_subset))
# find the right tract index
trac_right <- sub("_left", "_right", trac)
idx_right <- which(trac_right == names(dat_total_subset))
sub_col_name <- c(trac, trac_right, "cortisol", "testosterone", "estradiol", "progesterone",
"ges_time", "age", "sub", "motion_rel", "progesterone_z", "estradiol_z",
"testosterone_z", "cortisol_z", "ges_time_z", "scan", "age_z", "motion_rel_z")
aa <- subset(dat_total_subset, select=sub_col_name)
aa_long <- aa %>% pivot_longer(
cols = c(1, 2),
names_to = c('.value', 'hemi'),
names_pattern = "(.*)_(.*)") %>%
convert_as_factor(sub, hemi, scan)
list_subregions[[length(list_subregions)+1]] <- aa
list_subregions_long[[length(list_subregions_long)+1]] <- na.omit(aa_long)
}
}
#  ~ ges_time
plot_list <- list()
df_result_ges <- data.frame(ROI=character(),
p=double(),
b=double(),
beta=double(),
beta_lower=double(),
beta_upper=double(),stringsAsFactors=FALSE)
for (i in 1:length(list_subregions_long)) {
data <- list_subregions_long[[i]]
data_dv <- names(data)[length(data)]
print(data_dv)
fit_func <- formula(paste(data_dv, "~ hemi + age + ges_time + motion_rel"))
fit_tmp <- lme(fit_func, random = ~ 1 | sub, data=data, na.action=na.omit)
print(summary(fit_tmp))
sum_tmp <- summary(fit_tmp)
b_tmp <- unname(sum_tmp$coefficients$fixed['ges_time'])
# standardized beta and intervals
print("standardized beta and intervals")
idx_tmp <- length(data)
data$y_z_tmp <- scale(data[,idx_tmp], center = TRUE, scale = TRUE)
fit_z_tmp <- lme(y_z_tmp ~ hemi + age_z + ges_time_z + motion_rel_z,
random = ~ 1 | sub, data=data, na.action=na.omit)
sum_tmp_z <- summary(fit_z_tmp)
tmp_p <- sum_tmp_z$tTable["ges_time_z", "p-value"]
beta_lower_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "lower"]
beta_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "est."]
beta_upper_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "upper"]
print(intervals(fit_z_tmp, which=c("fixed")))
# append
df_result_ges[nrow(df_result_ges) + 1,] = c(data_dv, unname(tmp_p), b_tmp,
unname(beta_tmp), unname(beta_lower_tmp), unname(beta_upper_tmp))
}
# group CC into CC_RG(CC_Rostrum(CC_1), CC_Genu(CC_2)), CC_body(CC_345), CC_IS(CC_Isthmus(CC_6), CC_Splenium(CC_7))
dat_total_subset$CC_RG <- rowMeans(dat_total_subset[, c('CC_1', 'CC_2')])
dat_total_subset$CC_body <- rowMeans(dat_total_subset[, c('CC_3', 'CC_4', 'CC_5')])
dat_total_subset$CC_IS <- rowMeans(dat_total_subset[, c('CC_6', 'CC_7')])
for (i in tail(names(dat_total_subset),3)) {
fit_func <- formula(paste(i, "~ age + ges_time + motion_rel"))
fit_tmp <- lme(fit_func, random = ~ 1 | sub,
data=dat_total_subset, na.action=na.omit)
print(summary(fit_tmp))
sum_tmp <- summary(fit_tmp)
b_tmp <- unname(sum_tmp$coefficients$fixed['ges_time'])
# standardized beta and intervals
idx_tmp <- which(i == names(dat_total_subset))
y_z_tmp <- scale(dat_total_subset[,idx_tmp], center = TRUE, scale = TRUE)
fit_z_tmp <- lme(y_z_tmp ~ age_z + ges_time_z + motion_rel_z,
random = ~ 1 | sub, data=dat_total_subset, na.action=na.omit)
sum_tmp_z <- summary(fit_z_tmp)
tmp_p <- sum_tmp_z$tTable["ges_time_z", "p-value"]
beta_lower_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "lower"]
beta_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "est."]
beta_upper_tmp <- intervals(fit_z_tmp, which=c("fixed"))['fixed']$fixed["ges_time_z", "upper"]
print(intervals(fit_z_tmp, which=c("fixed")))
# append
df_result_ges[nrow(df_result_ges) + 1,] = c(i, unname(tmp_p), b_tmp,
unname(beta_tmp), unname(beta_lower_tmp), unname(beta_upper_tmp))
}
current_metric <- strsplit(metric, "_")[[1]][length(strsplit(metric, "_")[[1]])-1]
new_column_name_beta <- paste0(current_metric, "_beta")
df_final[[new_column_name_beta]] <- df_result_ges$beta
new_column_name_p <- paste0(current_metric, "_p")
df_final[[new_column_name_p]] <- df_result_ges$p
write.csv(df_result_ges,
file = paste0("df_result_ges_noddi_matlab_", current_metric, ".csv"),
row.names = FALSE)
}
write.csv(df_final, "all_dti_beta_ctrl_motion.csv", row.names=FALSE)
